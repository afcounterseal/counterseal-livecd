#!/bin/sh

### Ensure GIDs are stable accross releases
#   ... otherwise, things such as tor@service are broken
#   after applying an automatic upgrade (#15695, #15424, #13426, #15407)

# When installing packages apt may variate the order of package installations.
# That leads to different GID/UID for the created groups and users. This
# variation of GID/UID leads to problems, when we want to ship diffs for a
# smoother upgrade process. There are many different solutions flying around to
# fix this issue, but they were not elaborate for Tails and may have other nasty
# side-effects, as the maintainer scripts, may react differently, if they are
# not in charge of creating group/user themselves.

# We may be able to get rid of this script with the switch from aufs to overlayfs
# (#17256).

set -e

echo "Set fixed GIDs and UIDs"

Debug_gids_and_uids () {
	# Print content of /etc/{passwd, group}, if a difference against
	# the expected content is detected. Otherwise only the content of
	# those files is printed

	for file in passwd group; do
		diff -Naur "/usr/share/tails/build/${file}" "/etc/${file}" >&2 || :
		echo >&2
		echo "Content of '/etc/${file}':" >&2
		cat "/etc/${file}" >&2
		echo >&2
	done
}

Change_uid () {
	# Change_uid(NAME, NEW)
	# change UID for $NAME to $NEW
	# and update UID for all files, that were owned by the old UID

	NAME="$1"
	NEW="$2"
	old="$(getent passwd "${NAME}" | awk -F ':' '{print $3}')"

	if [ -n "${old}" ]; then
		echo "Changing UID for ${NAME} (${old} -> ${NEW})"
		if ! usermod --uid "${NEW}" "${NAME}"; then
			Debug_gids_and_uids
			exit 1
		fi
		# chown(1) and chgrp(1) clear the setuid and setgid bits;
		# let's preserve them.
		#
		# Using "-exec CMD +", find builds command lines incrementally,
		# before executing chown. Which is why the operation below is
		# not the "if a file has the setuid bit, then give it the setuid
		# bit" no-op, but rather "if a file had the setuid bit before
		# chown was run, then set it back".
		find / -wholename /proc -prune -o \( \
				\! -type l -uid "${old}" \
				-exec chown "${NEW}" '{}' + \
				\( \
					   -perm -6000 -exec chmod gu+s '{}' + \
					-o -perm -4000 -exec chmod u+s  '{}' + \
					-o -perm -2000 -exec chmod g+s  '{}' + \
				\) \
			\)
	fi
}

Change_gid () {
	# Change_gid(NAME, NEW)
	# change the GID for $NAME to $NEW
	# and update GID for all files, that were owned by the old GID

	NAME="$1"
	NEW="$2"
	old="$(getent group "${NAME}" | awk -F ':' '{print $3}')"

	if [ -n "${old}" ]; then
		echo "Changing GID for ${NAME} (${old} -> ${NEW})"
		if ! groupmod --gid "${NEW}" "${NAME}"; then
			Debug_gids_and_uids
			exit 1
		fi
		# See comments in Change_uid().
		find / -wholename /proc -prune -o \( \
				\! -type l -gid "${old}" \
				-exec chgrp "${NEW}" '{}' + \
				\( \
					   -perm -6000 -exec chmod gu+s '{}' + \
					-o -perm -4000 -exec chmod u+s  '{}' + \
					-o -perm -2000 -exec chmod g+s  '{}' + \
				\) \
			\)
	fi
}

# Temporarily give these users and groups a UID/GID that's out of the way,
# to avoid collisions
Change_uid pulse             1070
Change_uid speech-dispatcher 1080
Change_uid saned             1090
Change_uid colord            1100
Change_uid hplip             1110
Change_uid Debian-gdm        1120
Change_uid usbmux            1500

# Finally, give these users and groups the desired UID/GID
Change_uid pulse             107
Change_uid speech-dispatcher 108
Change_uid saned             109
Change_uid colord            110
Change_uid hplip             111
Change_uid Debian-gdm        112
Change_uid usbmux            150
Change_gid Debian-gdm        200
