#!/bin/sh

set -e
set -u

echo "Install the Tor Browser"

# Import the TBB_INSTALL, TBB_PROFILE, TBB_EXT and
# TOR_LAUNCHER_INSTALL variables, which contains the paths we will
# split TBB's actual browser (binaries etc), user data and extension
# into. While this differs from how the TBB organizes the files, the
# end result will be the same, and it's practical since when creating
# a new browser profile we can simply copy the profile directory
# without duplicating all extensions.
. /usr/local/lib/tails-shell-library/tor-browser.sh
# Import install_fake_package and strip_nondeterminism_wrapper
. /usr/local/lib/tails-shell-library/build.sh

download_and_verify_files() {
    local base_url target_files destination apt_proxy
    base_url="${1}"
    target_files="${2}"
    destination="${3}"

    # Use the builder's caching APT proxy, if any
    apt_proxy="$(apt-config --format '%v' dump Acquire::http::Proxy)"
    if [ -n "${apt_proxy}" ]; then
        export HTTP_PROXY="${apt_proxy}"
        export http_proxy="${apt_proxy}"
        export HTTPS_PROXY="${apt_proxy}"
        export https_proxy="${apt_proxy}"
    fi

    echo "${target_files}" | while read expected_sha256 tarball; do
        (
            cd "${destination}"
            echo "Fetching ${base_url}/${tarball} ..."
            curl --retry 20 --remote-name "${base_url}/${tarball}"
        )
        actual_sha256="$(sha256sum "${destination}/${tarball}" | cut -d' ' -f1)"
        if [ "${actual_sha256}" != "${expected_sha256}" ]; then
            echo "SHA256 mismatch for ${tarball}" >&2
            exit 1
        fi
    done
}

install_tor_browser() {
    local bundle destination tmp prep
    bundle="${1}"
    destination="${2}"

    tmp="$(mktemp -d)"
    tar -xf "${bundle}" -C "${tmp}"
    if [ -d "${tmp}"/tor-browser_en-US ]; then
        prep="${tmp}"/tor-browser_en-US/Browser
    elif [ -d "${tmp}"/tor-browser ]; then
        # TBB nightly builds
        prep="${tmp}"/tor-browser/Browser
    else
        echo "The main bundle's top level directory is wrong" >&2
        exit 1
    fi

    # Enable our myspell/hunspell dictionaries. TBB only provides the
    # one for en-US, but Debian's seems more comprehensive, so we'll
    # only use Debian's dictionaries.
    mkdir "${prep}"/dictionaries
    for f in /usr/share/hunspell/*.aff /usr/share/hunspell/*.dic; do
        ln -s "${f}" "${prep}"/dictionaries/
    done

    # Let's use the libstdc++ that the Tor Browser is intended to be used with,
    # instead of the system one, whenever ours is too old.
    # For details see projects/firefox/abicheck.cc in
    # https://git.torproject.org/builders/tor-browser-build.git
    # Tor Browser 9.0a7 requires GLIBCXX_3.4.25, which Buster has,
    # so disable this for now.
    # cp "${prep}"/TorBrowser/Tor/libstdc++/libstdc++.so.6 "${prep}"

    # We don't need the Tor binary, the shared libraries Tor needs
    # (but Firefox doesn't) and documentation shipped in the TBB.
    rm -r "${prep}"/TorBrowser/Tor "${prep}"/TorBrowser/Docs

    # The Tor Browser will fail, complaining about an incomplete profile,
    # unless there's a readable TorBrowser/Data/Browser/Caches
    # in the directory where the firefox executable is located.
    mkdir -p "${prep}"/TorBrowser/Data/Browser/Caches

    # Otherwise the "General" section in the preferences is not displayed.
    install -d -m 0755 "${prep}"/TorBrowser/UpdateInfo

    mv "${prep}" "${destination}"
    rm -r "${tmp}"
}

# Install Tor Launcher as a standalone XUL application.
install_tor_launcher() {
    local tbb_install destination tmp
    tbb_install="${1}"
    destination="${2}"

    tmp="$(mktemp -d)"
    7z x -o"${tmp}" "${tbb_install}/browser/omni.ja"
    mv "${tmp}/chrome/torlauncher/" "${destination}"
    # Tor Launcher is a system add-on but can be converted to
    # something that works as a XUL standalone application by just
    # moving things around:
    mkdir "${destination}/chrome"
    for x in content locale skin; do
        mv "${destination}/${x}" "${destination}/chrome/"
    done
    mkdir -p "${destination}"/defaults/preferences
    cp "${tmp}/defaults/preferences/torlauncher-prefs.js" \
       "${destination}/defaults/preferences/prefs.js"
    # ... and then we extract only the Tor Launcher parts from the
    # manifest, and adapt to how we moved files around above:
    grep torlauncher "${tmp}/chrome//chrome.manifest" \
        | sed --regexp-extended \
              -e 's@^(content|locale|skin) (torlauncher.*) torlauncher/(.*)$@\1 \2 chrome/\3@' \
              -e 's@^(component) (\S+) torlauncher/(.+)$@\1 \2 \3@' \
              -e 's@^(resource torlauncher) .*$@\1 ./@' \
        > "${destination}/chrome.manifest"
    cp "${destination}/chrome/skin/default48.png" "${destination}/icon.png"
    cat > "${destination}/application.ini" << EOF
[App]
Vendor=TorProject
Name=TorLauncher
Version=$(get_firefox_version "${tbb_install}/application.ini")
BuildID=$(date --utc --date="@$SOURCE_DATE_EPOCH" '+%Y%m%d')
ID=tor-launcher@torproject.org

[Gecko]
MinVersion=$(get_firefox_version "${tbb_install}/application.ini")
MaxVersion=*.*.*

[Shell]
Icon=icon.png
EOF
    chmod -R a+rX "${destination}"
    rm -r "${tmp}"
}

# TBB works around the lack of code signing for its extensions by
# hacking in exceptions. We do the same!
# Improving this is tracked on #12571.
apply_extension_code_signing_hacks () {
    local tbb_install tbb_timestamp
    tbb_install="${1}"
    tbb_timestamp="${2}"

    tmp="$(mktemp -d)"
    (
        cd "${tmp}"
        7z x -tzip "${tbb_install}/omni.ja"
        patch -p1 <<EOF
diff -Naur a/chrome/toolkit/content/mozapps/extensions/aboutaddonsCommon.js b/chrome/toolkit/content/mozapps/extensions/aboutaddonsCommon.js
--- a/chrome/toolkit/content/mozapps/extensions/aboutaddonsCommon.js	2019-09-02 15:24:00.000000000 +0200
+++ b/chrome/toolkit/content/mozapps/extensions/aboutaddonsCommon.js	2019-09-08 20:42:24.198382292 +0200
@@ -195,6 +195,10 @@
   if (addon.id == "https-everywhere-eff@eff.org") {
     return true;
   }
+  // Allow uBlock installed from Debian (Tails#12571)
+  if (addon.id == "uBlock0@raymondhill.net") {
+    return true;
+  }
   return addon.isCorrectlySigned !== false;
 }
 
diff -Naur a/modules/addons/XPIDatabase.jsm b/modules/addons/XPIDatabase.jsm
--- a/modules/addons/XPIDatabase.jsm	2019-09-02 15:24:00.000000000 +0200
+++ b/modules/addons/XPIDatabase.jsm	2019-09-08 20:40:29.469007744 +0200
@@ -2126,6 +2126,11 @@
       return true;
     }
 
+    // Ensure that we allow uBlock installed from Debian (Tails#12571)
+    if (aAddon.id == "uBlock0@raymondhill.net") {
+      return true;
+    }
+
     // Ensure that Tor Launcher is never enabled as an add-on. It will be
     // removed inside getInstallState() soon.
     if (aAddon.id == "tor-launcher@torproject.org")
@@ -2729,7 +2734,8 @@
       }
 
       unsigned =
-        XPIDatabase.mustSign(aNewAddon.type) && !aNewAddon.isCorrectlySigned;
+        XPIDatabase.mustSign(aNewAddon.type) && !aNewAddon.isCorrectlySigned
+        && aNewAddon.id !== "uBlock0@raymondhill.net";
       if (unsigned) {
         throw Error(`Extension ${aNewAddon.id} is not correctly signed`);
       }
diff -Naur a/modules/addons/XPIInstall.jsm b/modules/addons/XPIInstall.jsm
--- a/modules/addons/XPIInstall.jsm	2019-09-02 15:24:00.000000000 +0200
+++ b/modules/addons/XPIInstall.jsm	2019-09-08 20:41:07.345467589 +0200
@@ -3826,6 +3826,7 @@
     if (
       XPIDatabase.mustSign(addon.type) &&
       addon.id !== "https-everywhere-eff@eff.org" &&
+      addon.id !== "uBlock0@raymondhill.net" &&
       addon.signedState <= AddonManager.SIGNEDSTATE_MISSING
     ) {
       throw new Error(
EOF
        touch --date="@${tbb_timestamp}" \
              chrome/toolkit/content/mozapps/extensions/aboutaddonsCommon.js \
              modules/addons/XPIDatabase.jsm \
              modules/addons/XPIInstall.jsm
        rm "${tbb_install}/omni.ja"
        7z a -mtc=off -tzip "${tbb_install}/omni.ja" *
    )
    rm -r "${tmp}"
    tmp="$(mktemp -d)"
    (
        cd "${tmp}"
        7z x -tzip "${tbb_install}/browser/omni.ja"
        patch -p1 <<EOF
diff -Naur a/modules/BrowserGlue.jsm b/modules/BrowserGlue.jsm
--- a/modules/BrowserGlue.jsm	2019-09-02 15:24:00.000000000 +0200
+++ b/modules/BrowserGlue.jsm	2019-09-08 20:45:59.323681266 +0200
@@ -1926,7 +1926,8 @@
           // disabled. Even if they lack Mozilla's blessing they are enabled
           // nevertheless.
           if ((addon.signedState <= AddonManager.SIGNEDSTATE_MISSING) &&
-              (addon.id !== "https-everywhere-eff@eff.org")) {
+              (addon.id !== "https-everywhere-eff@eff.org") &&
+              (addon.id !== "uBlock0@raymondhill.net")) {
             this._notifyUnsignedAddonsDisabled();
             break;
           }
EOF
        touch --date="@${tbb_timestamp}" modules/BrowserGlue.jsm
        rm "${tbb_install}/browser/omni.ja"
        7z a -mtc=off -tzip "${tbb_install}/browser/omni.ja" *
    )
    rm -r "${tmp}"
}

apply_prefs_hacks() {
    local tbb_install tmp tbb_timestamp
    tbb_install="${1}"
    tbb_timestamp="${2}"

    tmp="$(mktemp -d)"
    (
        cd "${tmp}"
        7z x -tzip "${tbb_install}/browser/omni.ja"
        # Remove TBB's Tor Launcher settings since we don't enable it in
        # our Tor Browser.
        sed -i '/extensions\.torlauncher\./d' defaults/preferences/000-tor-browser.js
        # Display the Stop/Reload button: our test suite currently depends on it
        perl -pi -E \
            's/^(pref\("browser\.uiCustomization\.state",.*\\"loop-button\\")/$1,\\"stop-reload-button\\"/' \
            defaults/preferences/000-tor-browser.js

        # Append our custom prefs
        cat /usr/share/tails/tor-browser-prefs.js \
            >> defaults/preferences/000-tor-browser.js
        touch --date="@${tbb_timestamp}" defaults/preferences/000-tor-browser.js
            rm "${tbb_install}/browser/omni.ja"
            7z a -mtc=off -tzip "${tbb_install}/browser/omni.ja" *
    )
    rm -r "${tmp}"
}

strip_nondeterminism () {
    local tbb_install tbb_timestamp
    tbb_install="${1}"
    tbb_timestamp="${2}"

    for archive in "${tbb_install}/omni.ja" "${tbb_install}/browser/omni.ja"; do
        strip_nondeterminism_wrapper --type zip --timestamp "${tbb_timestamp}" \
                                     "${archive}" 2>/dev/null
    done
}

install_langpacks() {
    local langpacks_tarball destination tmp
    langpacks_tarball="${1}"
    destination="${2}"

    tmp="$(mktemp -d)"

    tar --directory="${tmp}" -xf "${langpacks_tarball}"
    for xpi in "${tmp}"/*.xpi; do
        locale="$(basename "${xpi}" .xpi)"
        dest_basename="langpack-${locale}@firefox.mozilla.org.xpi"
        [ "${locale}" = en-US ] || mv "${xpi}" "${destination}/${dest_basename}"
    done

    rm -r "${tmp}"
}

get_firefox_version() {
    # The application.ini file
    local appini
    appini="${1}"
    sed -n 's/^Version=\(.*\)$/\1/p' "${appini}"
}

install_debian_extensions() {
    local destination
    destination="${1}"
    shift
    apt-get install --yes "${@}"
    ln -s '/usr/share/mozilla/extensions/{ec8030f7-c20a-464f-9b0e-13a3a9e97384}/uBlock0@raymondhill.net' \
          "${destination}"/'uBlock0@raymondhill.net'
    patch -p1 < /usr/share/tails/uBlock-disable-autoUpdate.diff
}

create_default_profile() {
    local tbb_profile extensions_dir destination
    tbb_profile="${1}"
    tbb_extensions_dir="${2}"
    destination="${3}"

    rsync -a --exclude extensions \
          "${tbb_profile}"/ "${destination}"/

    mkdir -p "${destination}"/extensions
    for ext in "${tbb_extensions_dir}"/*; do
        ln -s "${ext}" "${destination}"/extensions/
    done
}

# For consistency we'll set timestamps of files we modify to the
# same one used by the Tor Browser instead of SOURCE_DATE_EPOCH.
TBB_TIMESTAMP="$(date --date='2000-01-01 00:00:00' +%s)"

TBB_SHA256SUMS_FILE=/usr/share/tails/tbb-sha256sums.txt
TBB_TARBALLS="$(grep "\<tor-browser-linux64-.*\.tar.xz$" "${TBB_SHA256SUMS_FILE}")"

# We'll use the en-US bundle as our basis
MAIN_TARBALL="$(echo "${TBB_TARBALLS}" | grep -o "tor-browser-linux64-.*_en-US\.tar\.xz" || :)"
NIGHTLY_BUILD=
if [ -z "${MAIN_TARBALL}" ] && [ "$(echo $TBB_TARBALLS | awk '{ print $2 }')" = 'tor-browser-linux64-tbb-nightly_ALL.tar.xz' ]; then
    # Except for TBB nightly builds; then there is only one bundle
    # containing all langpacks
    MAIN_TARBALL='tor-browser-linux64-tbb-nightly_ALL.tar.xz'
    NIGHTLY_BUILD=yes
fi
TBB_DIST_URL_FILE=/usr/share/tails/tbb-dist-url.txt
TBB_TARBALLS_BASE_URL="$(cat "${TBB_DIST_URL_FILE}")"

# The Firefox extensions we want to install from Debian and make
# available in the Tor Browser.
DEBIAN_EXT_PKGS="webext-ublock-origin"

TMP="$(mktemp -d)"
download_and_verify_files "${TBB_TARBALLS_BASE_URL}" "${TBB_TARBALLS}" "${TMP}"

install_tor_browser "${TMP}/${MAIN_TARBALL}" "${TBB_INSTALL}"
apply_extension_code_signing_hacks "${TBB_INSTALL}" "${TBB_TIMESTAMP}"
apply_prefs_hacks "${TBB_INSTALL}" "${TBB_TIMESTAMP}"
strip_nondeterminism "${TBB_INSTALL}" "${TBB_TIMESTAMP}"
install_tor_launcher "${TBB_INSTALL}" "${TOR_LAUNCHER_INSTALL}"

mkdir -p "${TBB_EXT}"
if [ "${NIGHTLY_BUILD}" != yes ]; then
    LANGPACKS_TARBALL="$(echo "${TBB_TARBALLS}" | grep -o "langpacks-tor-browser-linux64-.*\.tar\.xz")"
    install_langpacks "${TMP}/${LANGPACKS_TARBALL}" "${TBB_EXT}"
fi

rm -r "${TMP}"

# Let's put all the extensions from TBB in the global extensions
# directory...
mv "${TBB_INSTALL}"/TorBrowser/Data/Browser/profile.default/extensions/* "${TBB_EXT}"
rmdir "${TBB_INSTALL}"/TorBrowser/Data/Browser/profile.default/extensions

# ... and then install a few Firefox extension by using a fake
# firefox equivs package to satisfy the dependencies.
FIREFOX_VERSION=$(get_firefox_version "${TBB_INSTALL}"/application.ini)
FAKE_FIREFOX_VERSION=${FIREFOX_VERSION}+fake1
install_fake_package firefox "${FAKE_FIREFOX_VERSION}" web
install_debian_extensions "${TBB_EXT}" ${DEBIAN_EXT_PKGS}

mkdir -p "${TBB_PROFILE}"
create_default_profile "${TBB_INSTALL}"/TorBrowser/Data/Browser/profile.default "${TBB_EXT}" "${TBB_PROFILE}"

# Create a copy of the Firefox binary, for use e.g. by Tor Launcher.
# It won't be subject to AppArmor confinement.
cp -a "${TBB_INSTALL}/firefox.real" "${TBB_INSTALL}/firefox-unconfined"

chown -R root:root "${TBB_INSTALL}" "${TBB_PROFILE}" "${TBB_EXT}"
chmod -R a+rX "${TBB_INSTALL}" "${TBB_PROFILE}" "${TBB_EXT}"

# Make the Tor Browser into the system's default web browser
update-alternatives --install /usr/bin/x-www-browser x-www-browser /usr/local/bin/tor-browser 99
update-alternatives --install /usr/bin/gnome-www-browser gnome-www-browser /usr/local/bin/tor-browser 99
sed 's/\<firefox-esr\.desktop\>/tor-browser.desktop/' \
    /usr/share/applications/gnome-mimeapps.list \
    > /etc/xdg/gnome-mimeapps.list
chmod 644 /etc/xdg/gnome-mimeapps.list
