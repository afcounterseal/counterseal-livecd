#!/usr/bin/python3

import argparse
import logging
import os
import re
import subprocess
import sys

from typing import List
from pathlib import Path
from urllib.parse import urlparse
from urllib.request import Request, urlopen

from bs4 import BeautifulSoup  # type: ignore

JENKINS_IUKS_BASE_URL = "https://nightly.tails.boum.org/build_IUKs"
RSYNC_SERVER_HOSTNAME = "rsync.lizard"
LOG_FORMAT = "%(asctime)-15s %(levelname)s %(message)s"
log = logging.getLogger()


def main():
    parser = argparse.ArgumentParser(
        description="Copy IUKs from Jenkins to our rsync server \
        and verify that they match those built locally")
    parser.add_argument("--hashes-file",
                        type=str,
                        action="store",
                        required=True)
    parser.add_argument("--jenkins-build-id",
                        type=int,
                        action="store",
                        required=True)
    parser.add_argument("--work-dir", type=str, action="store", default=".")
    parser.add_argument("-q",
                        "--quiet",
                        action="store_true",
                        help="quiet output")
    parser.add_argument("--debug", action="store_true", help="debug output")
    parser.add_argument("--skip-sending-hashes-file",
                        action="store_true",
                        help="Assume the hashes file was uploaded already")
    parser.add_argument("--skip-downloading-iuks",
                        action="store_true",
                        help="Assume the IUKs were already downloaded")
    args = parser.parse_args()

    if args.debug:
        logging.basicConfig(level=logging.DEBUG, format=LOG_FORMAT)
    elif args.quiet:
        logging.basicConfig(level=logging.WARN, format=LOG_FORMAT)
    else:
        logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)

    if not Path(args.hashes_file).exists():
        log.error("%s does not exist", args.hashes_file)
        sys.exit(1)

    if not args.skip_sending_hashes_file:
        send_hashes_file(
            hashes_file=args.hashes_file,
            desthost=RSYNC_SERVER_HOSTNAME,
            destdir=args.work_dir,
        )

    if not args.skip_downloading_iuks:
        download_iuks_from_jenkins(
            hashes_file=args.hashes_file,
            desthost=RSYNC_SERVER_HOSTNAME,
            destdir=args.work_dir,
            jenkins_iuks_base_url=JENKINS_IUKS_BASE_URL,
            jenkins_build_id=args.jenkins_build_id,
        )

    verify_iuks(
        desthost=RSYNC_SERVER_HOSTNAME,
        iuks_dir=args.work_dir,
        hashes_file=Path(args.work_dir, args.hashes_file).name,
    )


def send_hashes_file(hashes_file: str, desthost: str, destdir: str) -> None:
    log.info("Sending %(f)s to %(d)s on %(h)s…" % {
        "f": hashes_file,
        "d": destdir,
        "h": desthost,
    })
    subprocess.run(
        ["scp", hashes_file, "%s:%s" % (desthost, destdir)], check=True)


def iuks_listed_in(hashes_file: str) -> List[str]:
    with Path(hashes_file).open() as f:
        lines = f.readlines()
    return [line.split('  ')[-1].rstrip() for line in lines]


def get_jenkins_iuks_urls(jenkins_iuks_base_url: str,
                          jenkins_build_id: int) -> List[str]:
    urls: List[str] = []
    source_version_index_url = jenkins_iuks_base_url + \
        "/configurations/axis-SOURCE_VERSION"
    for source_version_url in [
            source_version_index_url + '/' + link.get('href')
            for link in BeautifulSoup(
                urlopen(Request(source_version_index_url)),
                'html.parser').find_all(href=re.compile('^[1-9]'))
    ]:
        axis_label_index_url = source_version_url + "axis-label_exp/"
        log.debug("Looking at %s", axis_label_index_url)
        label_urls = [
            axis_label_index_url + link.get('href')
            for link in BeautifulSoup(urlopen(Request(axis_label_index_url)),
                                      'html.parser').find_all(
                                          href=re.compile('^[a-z]'))
        ]
        if len(label_urls) == 0:
            log.debug("Found no label URL in %s, ignoring this source version",
                      axis_label_index_url)
            continue
        if len(label_urls) > 1:
            log.error("Found too many label URLs in %s: %s",
                      axis_label_index_url, label_urls)
            sys.exit(1)
        label_url = label_urls[0]

        artifacts_index_url = label_url + '/builds/' + str(
            jenkins_build_id) + '/archive/'
        log.debug("Looking at %s", artifacts_index_url)
        iuk_urls = [
            artifacts_index_url + link.get('href') for link in BeautifulSoup(
                urlopen(Request(artifacts_index_url)), 'html.parser').find_all(
                    href=re.compile('[.]iuk$'))
        ]
        if len(iuk_urls) == 0:
            log.debug("Found no IUK URL in %s, ignoring this source version",
                      artifacts_index_url)
            continue
        if len(iuk_urls) > 1:
            log.error("Found too many IUK URLs in %s: %s", artifacts_index_url,
                      iuk_urls)
            sys.exit(1)
        else:
            iuk_url = iuk_urls[0]
        urls.append(iuk_url)
    log.debug("Found IUK URLs: %s", urls)
    return urls


def download_iuks_from_jenkins(hashes_file: str, desthost: str, destdir: str,
                               jenkins_iuks_base_url: str,
                               jenkins_build_id: int) -> None:
    log.info("Downloading IUKs from Jenkins to %s…", desthost)
    expected_iuks = iuks_listed_in(hashes_file)
    log.debug("IUKS: %s", ', '.join(expected_iuks))
    jenkins_iuks_urls = get_jenkins_iuks_urls(jenkins_iuks_base_url,
                                              jenkins_build_id)
    jenkins_iuks = [
        os.path.basename(urlparse(url).path) for url in jenkins_iuks_urls
    ]
    if set(expected_iuks) != set(jenkins_iuks):
        log.error(
            "Jenkins' set of IUKs differs from local one:\n"
            " - locally: %s\n"
            " - Jenkins: %s\n",
            expected_iuks, jenkins_iuks)
        sys.exit(1)
    for iuk_url in jenkins_iuks_urls:
        log.debug("Downloading %s to %s", iuk_url, destdir)
        subprocess.run([
            "ssh", desthost, "wget", "--quiet", "--no-clobber",
            "--directory-prefix=%s" % destdir, iuk_url
        ],
                       check=True)


def verify_iuks(desthost: str, iuks_dir: str, hashes_file: str) -> None:
    log.info("Verifying that IUKs built on Jenkins match those you've built…")
    try:
        subprocess.run([
            "ssh", desthost,
            "cd '%(d)s' && sha256sum --check --strict '%(f)s'" % {
                "d": iuks_dir,
                "f": Path(hashes_file).name,
            }
        ],
                       check=True)
    except subprocess.CalledProcessError:
        print("\nERROR: IUKs built on Jenkins don't match yours\n",
              file=sys.stderr)


if __name__ == "__main__":
    main()
